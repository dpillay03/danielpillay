[
  {
    "projectSlug": "should-we-go",
    "projectURL": "https://dpillay03.github.io/should-we-go/",
    "projectGit": "https://github.com/dpillay03/should-we-go",
    "projectName": "Should We Go?",
    "projectPunchline": "Last-minute plans, instant results. Your go-to for events and weather, right when you need it.",
    "projectImage": "/assets/should_we_go.png",
    "summary": "'Should We Go?' is a web application that provides users with last-minute event recommendations based on their selected state and date. It also offers weather forecasts for those events to help users plan their outings more effectively.",
    "technologies": [
      "React",
      "SeatGeek API",
      "Weather API",
      "Axios",
      "CSS3",
      "GH-PAGES"
    ],
    "buildProcess": "'Should We Go?' is a web application that provides users with last-minute event recommendations based on their selected state and date. It also offers weather forecasts for those events to help users plan their outings more effectively.\n\n1. Setup React App: Start by setting up a new React app using Create React App or any other preferred method.\n\n2. Create Components: Create the necessary components for your application, including `UserInput`, `InputFields`, `Results`, and `MobileMenu`. You can use functional components for simplicity.\n\n3. Define State Variables: Inside the `UserInput` component, define state variables to store selected state, selected date, events data, weather data, and the visibility of the mobile menu.\n\n```//javascript\nimport React, { useState } from 'react';\n\nfunction UserInput() {\n  const [selectedState, setSelectedState] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  const [events, setEvents] = useState([]);\n  const [weatherData, setWeatherData] = useState(null);\n  const [mobileMenuVisible, setMobileMenuVisible] = useState(false);\n  // Other code...\n}\n```\n\n4.Handle State Changes: Implement functions to handle changes in the selected state and date.\n\n```//javascript\nconst handleStateChange = (e) => {\n  setSelectedState(e.target.value);\n};\n\nconst handleDateChange = (e) => {\n  setSelectedDate(e.target.value);\n};\n```\n\n5. Fetch Events: Implement a function to fetch events data from the SeatGeek API using Axios.\n\n```//javascript\nconst fetchEvents = () => {\n  if (selectedState && selectedDate) {\n    axios.get(`https://api.seatgeek.com/2/events?venue.state=${selectedState}&datetime_utc.gte=${selectedDate}&client_id=${seatGeekToken}`).then(async (response) => {\n      console.log('Events:', response.data.events);\n      setEvents(response.data.events);\n      for (const event of response.data.events) {\n        const { venue: { location }, datetime_local: eventDateTime } = event;\n        const { lat, lon } = location;\n        const eventTime = new Date(eventDateTime);\n        const militaryHour = eventTime.getHours();\n        const formattedDate = eventTime.toISOString().split('T')[0];\n        const options = {\n          method: 'GET',\n          url: 'https://weatherapi-com.p.rapidapi.com/forecast.json',\n          params: { q: `${lat},${lon}`, dt: formattedDate },\n          headers: { 'X-RapidAPI-Key': `${weatherToken}`, 'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com' },\n        };\n        try {\n          const response = await axios.request(options);\n          if (response.data.forecast.forecastday[0].hour[militaryHour]) {\n            const weatherData = response.data.forecast.forecastday[0].hour[militaryHour];\n            const { temp_f, condition, code } = weatherData;\n            event.weatherData = { temperature: temp_f, conditions: condition.text, code: condition.code };\n            setEvents((prevEvents) => [...prevEvents]);\n          } else {\n            console.log('Weather data for the selected hour is undefined.');\n          }\n        } catch (error) {\n          console.error('Error fetching weather data:', error);\n        }\n      }\n    }).catch((error) => {\n      console.error('Error:', error);\n    });\n  } else {\n    console.log('Please select a state and date.');\n  }\n};\n```\n\n6. Render Input Fields: Render the `InputFields` component within the `UserInput` component and pass the necessary props.\n\n```//javascript\n<InputFields\n  states={states}\n  handleStateChange={handleStateChange}\n  handleDateChange={handleDateChange}\n  fetchEvents={fetchEvents}\n/>\n```\n\n7. Render Results: Conditionally render the `Results` component based on whether events data is available.\n\n```//javascript\n{events.length > 0 && <Results events={events} />}\n```\n\n8. Create InputFields Component: Create the `InputFields` component to render state dropdown, date picker, and search button.\n\n```//javascript\nimport React from 'react';\n\nconst InputFields = ({ states, handleStateChange, handleDateChange, fetchEvents }) => {\n  // Input fields JSX\n};\n```\n\n9. Implement Search Button Click: Inside the `fetchEvents` function, set the events data and update the `searchClicked` state variable.\n\n```//javascript\nconst fetchEvents = () => {\n  // Fetch events data using Axios\n  // Update events state variable\n  setSearchClicked(true);\n};\n```\n\n10. Conditional Rendering of Header: Inside the `UserInput` component, conditionally render the \"Events in [state]\" header based on the `searchClicked` state variable.\n\n```//javascript\n{searchClicked && (\n  <h1 className='site-header result'>\n    Events in {states.find((state) => state.abbreviation === selectedState)?.name}\n  </h1>\n)}\n```\n\n11. Style Components: Style the components using CSS or a CSS framework according to your design requirements.\n\n12. Test and Refine: Test the application to ensure that all components are functioning as expected. Make any necessary refinements to improve usability and user experience.",
    "obstaclesStretch": "A potential future enhancement for the project could involve implementing predictive search functionality for city names. This would allow users to search for events based on their preferred city, providing a more personalized and intuitive experience. Integrating this feature would require additional API integration and possibly the use of libraries like React-Select for enhanced search capabilities.",
    "obstaclesStretch": "A potential future enhancement for the project could involve implementing predictive search functionality for city names. This would allow users to search for events based on their preferred city, providing a more personalized and intuitive experience. Integrating this feature would require additional API integration and possibly the use of libraries like React-Select for enhanced search capabilities."
  },
  {
    "projectSlug": "portfolio-website",
    "projectURL": "https://danielpillay.com",
    "projectGit": "https://github.com/dpillay03/danielpillay",
    "projectName": "Daniel Pillay",
    "projectPunchline": "Follow me on my journey through life, tech, and everything in between.",
    "projectImage": "/assets/daniel_pillay_portfolio.png",
    "summary": "This portfolio website is designed to highlight my skills and projects in web development. It serves as a central platform where potential employers or clients can view my work and get in touch.",
    "technologies": [
      "React",
      "React Router",
      "HTML5",
      "CSS3",
      "JavaScript",
      "GH-PAGES"
    ],
    "buildProcess": "The portfolio website is built with React, leveraging the React Router for SPA functionality. The site is structured to present information effectively, ensuring that visitors can easily navigate through different sections.\n\n1. Setup React App: Initiate the project using Create React App.\n\n2. Implement React Router: Configure React Router to handle navigation within the application.\n\n3. Design Layout: Design the layout using CSS3 and Flexbox to ensure responsiveness and accessibility.\n\n4. Develop Components: Develop various components such as the Home, About, Projects, and Contact sections.\n\n5. Integration: Integrate GitHub Pages for deployment, ensuring that the website is available to a broader audience.\n\n6. Testing: Perform thorough testing to ensure cross-browser compatibility and responsiveness.\n\n7. Optimization: Optimize the application for better performance and loading times.",
    "obstaclesStretch": "This project was smoothly executed without significant obstacles. Looking ahead, I aim to enhance the website's functionality by integrating a headless CMS. This upgrade will streamline the process of managing and rendering blog content, moving away from the current method of using static data. This improvement will not only enrich the user experience but also facilitate easier content updates and maintenance."
  }
]
